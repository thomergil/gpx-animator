plugins {
    id 'application'
    id 'com.github.johnrengelman.shadow' version '6.0.0'
    id 'com.github.spotbugs' version '4.6.0'
    id 'pmd'
    id 'checkstyle'
}

version = '1.6.0-SNAPSHOT'
group = 'app.gpx-animator'

mainClassName = 'app.gpx_animator.Main'
sourceCompatibility = '15'
targetCompatibility = '15'

repositories {
    mavenCentral()
    maven { url 'https://www.dcm4che.org/maven2/' }
}

configurations {
    developmentOnly
}

dependencies {
    compileOnly 'com.github.spotbugs:spotbugs-annotations:4.1.2'
    implementation 'xuggle:xuggle-xuggler:5.4'
    implementation 'javax.xml.bind:jaxb-api:2.3.1'
    implementation 'com.sun.xml.bind:jaxb-core:2.3.0.1'
    implementation 'org.glassfish.jaxb:jaxb-runtime:2.3.1'
    implementation 'javax.activation:activation:1.1.1'
    implementation 'org.slf4j:slf4j-api:1.7.30'
    implementation 'org.slf4j:slf4j-simple:1.7.30'
    implementation 'com.drewnoakes:metadata-extractor:2.11.0'
    implementation 'org.imgscalr:imgscalr-lib:4.2'
    implementation 'commons-io:commons-io:2.6'
    implementation 'com.jgoodies:jgoodies-forms:1.9.0'
    implementation 'com.vladsch.flexmark:flexmark-all:0.50.44'
    implementation 'org.jetbrains:annotations:18.0.0'
    testCompileOnly 'com.github.spotbugs:spotbugs-annotations:4.1.2'
    testImplementation 'org.junit.jupiter:junit-jupiter-engine:5.5.2'
    testImplementation 'org.junit.jupiter:junit-jupiter-params:5.5.2'
    testImplementation 'org.junit.platform:junit-platform-engine:+'
}

test.classpath += configurations.developmentOnly
run.classpath += configurations.developmentOnly

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
    options.compilerArgs += ["-Xlint:deprecation", "-Xlint:unchecked"]
}

task copyChangelog(type: Copy) {
    from "."
    include "CHANGELOG.md"
    into "./src/main/resources"
}

task deleteChangelog(type: Delete) {
    delete "./src/main/resources/CHANGELOG.md"
}

task installGitHooks(type: Copy) {
    from new File(rootProject.rootDir, 'config/git/pre-push')
    into { new File(rootProject.rootDir, '.git/hooks') }
    fileMode 0755
}

def test = tasks.named("test") {
    useJUnitPlatform {
        excludeTags "mapsTest"
    }
}

def mapsTest = tasks.register("mapsTest", Test) {
    useJUnitPlatform {
        includeTags "mapsTest"
    }
    shouldRunAfter test
}

shadowJar {
    mergeServiceFiles()
}

spotbugsMain {
    reports {
        xml.enabled = false
        html.enabled = true
    }
}

spotbugsTest {
    reports {
        xml.enabled = false
        html.enabled = true
    }
}

checkstyle {
    configFile file("${projectDir}/config/checkstyle/checkstyle.xml")
    toolVersion "8.37"
}

pmd {
    ruleSets = []
    ruleSetFiles = files("${projectDir}/config/pmd/pmd-rules.xml")
}

compileJava.dependsOn copyChangelog
clean.dependsOn deleteChangelog
assemble.dependsOn check
check.dependsOn installGitHooks
